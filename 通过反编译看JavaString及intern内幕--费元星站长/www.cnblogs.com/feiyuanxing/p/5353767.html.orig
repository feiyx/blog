
<!DOCTYPE html>
<html lang="zh-cn">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>通过反编译看Java String及intern内幕--费元星站长 - 费元星的博客 - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=ON3Mxdo4-HlSMqbNDBZXhFIcGLon3eZDvU8zBESgwkk1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/coffee/bundle-coffee.css?v=NnZbvdgFaQNhu3t8P4Wsaz98sDQkgRt7Qxq2rzF0ZRU1"/>
<link type="text/css" rel="stylesheet" href="/blog/customcss/219212.css?v=SlahhkE7ELQOV9kA%2fmhyfXP48o0%3d"/>
<link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/coffee/bundle-coffee-mobile.css?v=EhLLUe5NHsx18JODVZscd5ef3A8WbJHKTlTvuKQjsl01"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/feiyuanxing/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/feiyuanxing/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/feiyuanxing/wlwmanifest.xml"/>
<script src="//common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
<script type="text/javascript">var currentBlogApp = 'feiyuanxing', cb_enable_mathjax=false;var isLogined=false;</script>
<script src="/bundles/blog-common.js?v=O-NTEmnhjbG7lSYLc3yeqkrVxfMJyY9iXf4xyjlKikw1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>
<!--PageBeginHtml Block Begin-->
<td> <a style="color: red" align="center" href="https://www.feiyx.com/"><b>
			<center><font size="4">未来星开发团队的官网</font></center>
			</b>
			</a>
	</td>
	<br>
<!--PageBeginHtml Block End-->

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/feiyuanxing/"><img id="blogLogo" src="/Skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/feiyuanxing/">费元星的博客</a></h1>
<h2>未来星工作室--狒狒</h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="navigator">
			
<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
	<li><a id="blog_nav_myhome" class="menu" href="http://www.cnblogs.com/feiyuanxing/">首页</a></li>
	<li><a id="blog_nav_newpost" class="menu" rel="nofollow" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
	<li><a id="blog_nav_contact" accesskey="9" class="menu" rel="nofollow" href="https://msg.cnblogs.com/send/%E8%B4%B9%E5%85%83%E6%98%9F%E7%9A%84%E5%8D%9A%E5%AE%A2">联系</a></li>
	<li><a id="blog_nav_admin" class="menu" rel="nofollow" href="https://i.cnblogs.com/">管理</a></li>
	<li><a id="blog_nav_rss" class="menu" href="http://www.cnblogs.com/feiyuanxing/rss">订阅</a>
	<a id="blog_nav_rss_image" class="aHeaderXML" href="http://www.cnblogs.com/feiyuanxing/rss"><img src="//www.cnblogs.com/images/xml.gif" alt="订阅" /></a></li>
</ul>


			<div class="blogStats">
				
				<div id="blog_stats">
<!--done-->
随笔- 93&nbsp;
文章- 0&nbsp;
评论- 3&nbsp;
</div>
				
			</div><!--end: blogStats -->
		</div><!--end: navigator 博客导航栏 -->
		
<div id="post_detail">
<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/feiyuanxing/p/5353767.html">通过反编译看Java String及intern内幕--费元星站长</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body"><h1 class="postTitle"><a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/paddix/p/5326863.html">通过反编译看Java String及intern内幕</a></h1>
<div class="clear">&nbsp;</div>
<div class="postBody">
<div id="cnblogs_post_body">
<p><strong>一、字符串问题</strong></p>
<p>　　字符串在我们平时的编码工作中其实用的非常多，并且用起来也比较简单，所以很少有人对其做特别深入的研究。倒是面试或者笔试的时候，往往会涉及比较深入和难度大一点的问题。我在招聘的时候也偶尔会问应聘者相关的问题，倒不是说一定要回答的特别正确和深入，通常问这些问题的目的有两个，第一是考察对 JAVA 基础知识的了解程度，第二是考察应聘者对技术的态度。</p>
<p>　　我们看看以下程序会输出什么结果？如果你能正确的回答每一道题，并且清楚其原因，那本文对你就没什么太大的意义。如果回答不正确或者不是很清楚其原理，那就仔细看看以下的分析，本文应该能帮助你清楚的理解每段程序的结果及输出该结果的深层次原因。</p>
<p>代码段一：</p>
<div class="cnblogs_Highlighter sh-gutter">
<div>
<div id="highlighter_6356" class="syntaxhighlighter  java  ">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">package</code>&nbsp;<code class="java plain">com.paddx.test.string;</code></div>
<div class="line number2 index1 alt1"><code class="java keyword">public</code>&nbsp;<code class="java keyword">class</code>&nbsp;<code class="java plain">StringTest {</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code>&nbsp;<code class="java keyword">static</code>&nbsp;<code class="java keyword">void</code>&nbsp;<code class="java plain">main(String[] args) {</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String str1 =&nbsp;</code><code class="java string">"string"</code><code class="java plain">;</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String str2 =&nbsp;</code><code class="java keyword">new</code>&nbsp;<code class="java plain">String(</code><code class="java string">"string"</code><code class="java plain">);</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String str3 = str2.intern();</code></div>
<div class="line number7 index6 alt2">&nbsp;</div>
<div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(str1==str2);</code><code class="java comments">//#1</code></div>
<div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(str1==str3);</code><code class="java comments">//#2</code></div>
<div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div>
<div class="line number11 index10 alt2"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>&nbsp;代码段二：</p>
<div class="cnblogs_Highlighter sh-gutter">
<div>
<div id="highlighter_129400" class="syntaxhighlighter  java">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">package</code>&nbsp;<code class="java plain">com.paddx.test.string;</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<div id="highlighter_79547" class="syntaxhighlighter  java  ">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code>&nbsp;<code class="java keyword">class</code>&nbsp;<code class="java plain">StringTest01 {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code>&nbsp;<code class="java keyword">static</code>&nbsp;<code class="java keyword">void</code>&nbsp;<code class="java plain">main(String[] args) {</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String baseStr =&nbsp;</code><code class="java string">"baseStr"</code><code class="java plain">;</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">final</code>&nbsp;<code class="java plain">String baseFinalStr =&nbsp;</code><code class="java string">"baseStr"</code><code class="java plain">;</code></div>
<div class="line number5 index4 alt2">&nbsp;</div>
<div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String str1 =&nbsp;</code><code class="java string">"baseStr01"</code><code class="java plain">;</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String str2 =&nbsp;</code><code class="java string">"baseStr"</code><code class="java plain">+</code><code class="java string">"01"</code><code class="java plain">;</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String str3 = baseStr +&nbsp;</code><code class="java string">"01"</code><code class="java plain">;</code></div>
<div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String str4 = baseFinalStr+</code><code class="java string">"01"</code><code class="java plain">;</code></div>
<div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String str5 =&nbsp;</code><code class="java keyword">new</code>&nbsp;<code class="java plain">String(</code><code class="java string">"baseStr01"</code><code class="java plain">).intern();</code></div>
<div class="line number11 index10 alt2">&nbsp;</div>
<div class="line number12 index11 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(str1 == str2);</code><code class="java comments">//#3</code></div>
<div class="line number13 index12 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(str1 == str3);</code><code class="java comments">//#4</code></div>
<div class="line number14 index13 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(str1 == str4);</code><code class="java comments">//#5</code></div>
<div class="line number15 index14 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(str1 == str5);</code><code class="java comments">//#6</code></div>
<div class="line number16 index15 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div>
<div class="line number17 index16 alt2"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>代码段三（1）：　</p>
<div class="cnblogs_Highlighter sh-gutter">
<div>
<div id="highlighter_638671" class="syntaxhighlighter  java">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">package</code>&nbsp;<code class="java plain">com.paddx.test.string;&lt;br&gt;　　</code></div>
<div class="line number2 index1 alt1"><code class="java keyword">public</code>&nbsp;<code class="java keyword">class</code>&nbsp;<code class="java plain">InternTest {</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code>&nbsp;<code class="java keyword">static</code>&nbsp;<code class="java keyword">void</code>&nbsp;<code class="java plain">main(String[] args) {</code></div>
<div class="line number4 index3 alt1">&nbsp;</div>
<div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String str2 =&nbsp;</code><code class="java keyword">new</code>&nbsp;<code class="java plain">String(</code><code class="java string">"str"</code><code class="java plain">)+</code><code class="java keyword">new</code>&nbsp;<code class="java plain">String(</code><code class="java string">"01"</code><code class="java plain">);</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">str2.intern();</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String str1 =&nbsp;</code><code class="java string">"str01"</code><code class="java plain">;</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(str2==str1);</code><code class="java comments">//#7</code></div>
<div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div>
<div class="line number10 index9 alt1"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>&nbsp;代码段三（2）：</p>
<div class="cnblogs_Highlighter sh-gutter">
<div>
<div id="highlighter_346043" class="syntaxhighlighter  java">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">package</code>&nbsp;<code class="java plain">com.paddx.test.string;</code></div>
<div class="line number2 index1 alt1">&nbsp;</div>
<div class="line number3 index2 alt2"><code class="java keyword">public</code>&nbsp;<code class="java keyword">class</code>&nbsp;<code class="java plain">InternTest01 {</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code>&nbsp;<code class="java keyword">static</code>&nbsp;<code class="java keyword">void</code>&nbsp;<code class="java plain">main(String[] args) {</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String str1 =&nbsp;</code><code class="java string">"str01"</code><code class="java plain">;</code></div>
<div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">String str2 =&nbsp;</code><code class="java keyword">new</code>&nbsp;<code class="java plain">String(</code><code class="java string">"str"</code><code class="java plain">)+</code><code class="java keyword">new</code>&nbsp;<code class="java plain">String(</code><code class="java string">"01"</code><code class="java plain">);</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">str2.intern();</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">System.out.println(str2 == str1);</code><code class="java comments">//#8</code></div>
<div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div>
<div class="line number10 index9 alt1"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>　为了方便描述，我对上述代码的输出结果由#1~#8进行了编码，下文中蓝色字体部分即为结果。</p>
<p><strong>二、字符串深入分析</strong></p>
<p><strong>　　1、代码段一分析</strong></p>
<p>　　字符串不属于基本类型，但是可以像基本类型一样，直接通过字面量赋值，当然也可以通过new来生成一个字符串对象。不过通过字面量赋值的方式和new的方式生成字符串有本质的区别：</p>
<p><img src="https://images2015.cnblogs.com/blog/820406/201603/820406-20160327230524542-2090513326.png" alt="" /></p>
<p>　　通过字面量赋值创建字符串时，会优先在常量池中查找是否已经存在相同的字符串，倘若已经存在，栈中的引用直接指向该字符串；倘若不存在，则在常量池中生成一个字符串，再将栈中的引用指向该字符串。而通过new的方式创建字符串时，就直接在堆中生成一个字符串的对象（备注，JDK 7 以后，HotSpot 已将常量池从永久代转移到了堆中。详细信息可参考《<a href="http://www.cnblogs.com/paddix/p/5309550.html" target="_blank">JDK8内存模型-消失的PermGen</a>》一文），栈中的引用指向该对象。对于堆中的字符串对象，可以通过 intern() 方法来将字符串添加的常量池中，并返回指向该常量的引用。</p>
<p>现在我们应该能很清楚代码段一的结果了：</p>
<p>结果 #1：因为str1指向的是字符串中的常量，str2是在堆中生成的对象，所以str1==str2返回false。</p>
<p>结果 #2：str2调用intern方法，会将str2中值（&ldquo;string&rdquo;）复制到常量池中，但是常量池中已经存在该字符串（即str1指向的字符串），所以直接返回该字符串的引用，因此str3==str2返回true。</p>
<p>以下运行代码段一的代码的结果：</p>
<p><img src="https://images2015.cnblogs.com/blog/820406/201603/820406-20160331070524176-28747533.png" alt="" /></p>
<p><strong>&nbsp;2、代码段二分析</strong></p>
<p>对于代码段二的结果，还是通过反编译StringTest01.class文件比较容易理解：</p>
<p>&nbsp;常量池内容（部分）：</p>
<p><img src="https://images2015.cnblogs.com/blog/820406/201603/820406-20160331072611348-942598812.png" alt="" /></p>
<p>执行指令（部分，第二列#+序数对应常量池中的项）：</p>
<p><img src="https://images2015.cnblogs.com/blog/820406/201603/820406-20160331072104082-574379653.png" alt="" /></p>
<p>在解释上述执行过程之前，先了解两条指令：</p>
<p>ldc：Push item from run-time constant pool，从常量池中加载指定项的引用到栈。</p>
<p>astore_&lt;n&gt;：Store reference into local variable，将引用赋值给第n个局部变量。</p>
<p>现在我们开始解释代码段二的执行过程：</p>
<p>0: ldc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #2：加载常量池中的第二项（"baseStr"）到栈中。</p>
<p>2: astore_1 &nbsp; &nbsp; &nbsp;：将1中的引用赋值给第一个局部变量，即String baseStr = "baseStr"；</p>
<p>3: ldc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #2：加载常量池中的第二项（"baseStr"）到栈中。</p>
<p>5: astore_2 &nbsp; &nbsp; &nbsp;：将3中的引用赋值给第二个局部变量，即 final String baseFinalStr="baseStr"；&nbsp;</p>
<p>6: ldc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #3：加载常量池中的第三项（"baseStr01"）到栈中。</p>
<p>8: astore_3 &nbsp; &nbsp; ：将6中的引用赋值给第三个局部变量，即String str1="baseStr01";</p>
<p>9: ldc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #3：加载常量池中的第三项（"baseStr01"）到栈中。</p>
<p>11: astore &nbsp; &nbsp; &nbsp; &nbsp;4：将9中的引用赋值给第四个局部变量：即String str2="baseStr01"；</p>
<p>结果#3：str1==str2 肯定会返回true，因为str1和str2都指向常量池中的同一引用地址。所以其实在JAVA 1.6之后，常量字符串的&ldquo;+&rdquo;操作，编译阶段直接会合成为一个字符串。</p>
<p>13: new &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #4：生成StringBuilder的实例。</p>
<p>16: dup&nbsp;　　　　 &nbsp; ：复制13生成对象的引用并压入栈中。</p>
<p>17: invokespecial #5：调用常量池中的第五项，即StringBuilder.&lt;init&gt;方法。</p>
<p>以上三条指令的作用是生成一个StringBuilder的对象。</p>
<p>20: aload_1　　：加载第一个参数的值，即"baseStr"</p>
<p>21: invokevirtual #6 ：调用StringBuilder对象的append方法。</p>
<p>24: ldc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #7：加载常量池中的第七项（"01"）到栈中。</p>
<p>26: invokevirtual #6：调用StringBuilder.append方法。</p>
<p>29: invokevirtual #8：调用StringBuilder.toString方法。</p>
<p>32: astore &nbsp; &nbsp; &nbsp; &nbsp;5：将29中的结果引用赋值改第五个局部变量，即对变量str3的赋值。</p>
<p>结果 #4：因为str3实际上是stringBuilder.append()生成的结果，所以与str1不相等，结果返回false。</p>
<p>34: ldc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #3：加载常量池中的第三项（"baseStr01"）到栈中。</p>
<p>36: astore &nbsp; &nbsp; &nbsp; &nbsp;6：将34中的引用赋值给第六个局部变量，即str4="baseStr01";</p>
<p>结果 #5 ：因为str1和str4指向的都是常量池中的第三项，所以str1==str4返回true。这里我们还能发现一个现象，对于final字段，编译期直接进行了常量替换，而对于非final字段则是在运行期进行赋值处理的。</p>
<p>38: new &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #9：创建String对象</p>
<p>41: dup &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ：复制引用并压如栈中。</p>
<p>42: ldc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; #3：加载常量池中的第三项（"baseStr01"）到栈中。</p>
<p>44: invokespecial #10：调用String."&lt;init&gt;"方法，并传42步骤中的引用作为参数传入该方法。</p>
<p>47: invokevirtual #11：调用String.intern方法。</p>
<p>从38到41的对应的源码就是new String("baseStr01").intern()。</p>
<p>50: astore &nbsp; &nbsp; &nbsp; &nbsp;7：将47步返回的结果赋值给变量7，即str5指向baseStr01在常量池中的位置。</p>
<p>结果 #6 ：因为str5和str1都指向的都是常量池中的同一个字符串，所以str1==str5返回true。</p>
<p>运行代码段二，输出结果如下：&nbsp;</p>
<p><img src="https://images2015.cnblogs.com/blog/820406/201604/820406-20160405082100703-2130122632.png" alt="" /></p>
<p><strong>&nbsp;3、代码段三解析：</strong></p>
<p>&nbsp;对于代码段三，在 JDK 1.6 和 JDK 1.7中的运行结果不同。我们先看一下运行结果，然后再来解释其原因：</p>
<p>&nbsp;JDK 1.6 下的运行结果：</p>
<p><img src="https://images2015.cnblogs.com/blog/820406/201604/820406-20160401175318941-425616159.png" alt="" /></p>
<p>JDK 1.7 下的运行结果：</p>
<p><img src="https://images2015.cnblogs.com/blog/820406/201604/820406-20160401175447723-684389978.png" alt="" />&nbsp;</p>
<p>根据对代码段一的分析，应该可以很简单得出 JDK 1.6 的结果，因为 str2 和 str1本来就是指向不同的位置，理应返回false。</p>
<p>比较奇怪的问题在于JDK 1.7后，对于第一种情况返回true，但是调换了一下位置返回的结果就变成了false。这个原因主要是从JDK 1.7后，HotSpot 将常量池从永久代移到了元空间，正因为如此，JDK 1.7 后的intern方法在实现上发生了比较大的改变，JDK 1.7后，intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用，这一点与之前没有区别，区别在于，如果在常量池找不到对应的字符串，则不会再将字符串拷贝到常量池，而只是在常量池中生成一个对原字符串的引用。所以:</p>
<p>结果 #7：在第一种情况下，因为常量池中没有&ldquo;str01&rdquo;这个字符串，所以会在常量池中生成一个对堆中的&ldquo;str01&rdquo;的引用，而在进行字面量赋值的时候，常量池中已经存在，所以直接返回该引用即可，因此str1和str2都指向堆中的字符串，返回true。</p>
<p>结果 #8：调换位置以后，因为在进行字面量赋值（String str1 = "str01"）的时候，常量池中不存在，所以str1指向的常量池中的位置，而str2指向的是堆中的对象，再进行intern方法时，对str1和str2已经没有影响了，所以返回false。</p>
<p>&nbsp;</p>
<p><strong>三、常见面试题解答</strong></p>
<p>有了对以上的知识的了解，我们现在再来看常见的面试或笔试题就很简单了：</p>
<p>&nbsp;</p>
<p>Q：String s = new String("xyz")，创建了几个String Object?&nbsp;</p>
<p>A：两个，常量池中的"xyz"和堆中对象。</p>
<p>&nbsp;</p>
<p>Q：下列程序的输出结果：</p>
<p>String s1 = &ldquo;abc&rdquo;;<br />String s2 = &ldquo;abc&rdquo;;<br />System.out.println(s1 == s2);</p>
<p>A：true，均指向常量池中对象。</p>
<p>&nbsp;</p>
<p>Q：下列程序的输出结果：</p>
<p>String s1 = new String(&ldquo;abc&rdquo;);<br />String s2 = new String(&ldquo;abc&rdquo;);<br />System.out.println(s1 == s2);</p>
<p>A：false，两个引用指向堆中的不同对象。</p>
<p>&nbsp;</p>
<p>Q：下列程序的输出结果：</p>
<p>String s1 = &ldquo;abc&rdquo;;<br />String s2 = &ldquo;a&rdquo;;<br />String s3 = &ldquo;bc&rdquo;;<br />String s4 = s2 + s3;<br />System.out.println(s1 == s4);</p>
<p>A：false，因为s2+s3实际上是使用StringBuilder.append来完成，会生成不同的对象。</p>
<p>&nbsp;</p>
<p>Q：下列程序的输出结果：</p>
<p>String s1 = &ldquo;abc&rdquo;;<br />final String s2 = &ldquo;a&rdquo;;<br />final String s3 = &ldquo;bc&rdquo;;<br />String s4 = s2 + s3;<br />System.out.println(s1 == s4);</p>
<p>A：true，因为final变量在编译后会直接替换成对应的值，所以实际上等于s4="a"+"bc"，而这种情况下，编译器会直接合并为s4="abc"，所以最终s1==s4。</p>
<p>&nbsp;</p>
<p>Q：下列程序的输出结果：</p>
<p>String s = new String("abc");<br />String s1 = "abc";<br />String s2 = new String("abc");<br /><br />System.out.println(s == s1.intern());<br />System.out.println(s == s2.intern());<br />System.out.println(s1 == s2.intern());</p>
<p>A：false，false，true，具体原因参考第二部分内容。</p>


</div>


</div></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class = "postDesc">posted @ <span id="post-date">2016-04-05 09:04</span> <a href='http://www.cnblogs.com/feiyuanxing/'>费元星的博客</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="https://i.cnblogs.com/EditPosts.aspx?postid=5353767" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(5353767);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,cb_blogId=219212,cb_entryId=5353767,cb_blogApp=currentBlogApp,cb_blogUserGuid='806a1ad5-d1cf-e411-b908-9dcfd8948a71',cb_entryCreatedDate='2016/4/5 9:04:00';loadViewCount(cb_entryId);var cb_postType=1;</script>
	
</div><!--end: topics 文章、评论容器-->
</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id='comment_form' class='commentform'>
<a name='commentform'></a>
<div id='divCommentShow'></div>
<div id='comment_nav'><span id='span_refresh_tips'></span><a href='javascript:void(0);' onclick='return RefreshCommentList();' id='lnk_RefreshComments' runat='server' clientidmode='Static'>刷新评论</a><a href='#' onclick='return RefreshPage();'>刷新页面</a><a href='#top'>返回顶部</a></div>
<div id='comment_form_container'></div>
<div class='ad_text_commentbox' id='ad_text_under_commentbox'></div>
<div id='ad_t2'></div>
<div id='opt_under_post'></div>
<div id='cnblogs_c1' class='c_ad_block'></div>
<div id='under_post_news'></div>
<div id='cnblogs_c2' class='c_ad_block'></div>
<div id='under_post_kb'></div>
<div id='HistoryToday' class='c_ad_block'></div>
<script type='text/javascript'>
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverAdT2();
    deliverAdC1();
    deliverAdC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);   
</script>
</div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2018 费元星的博客
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
<!--PageEndHtml Block Begin-->
<td> <a style="color: red" align="center" href="https://www.feiyx.com/"><b>
			<center><font size="15">未来星开发团队的官网</font></center>
			</b>
			</a>
	</td>
	<br>
<!--PageEndHtml Block End-->
</body>
</html>
